# Databricks notebook source
# MAGIC %md
# MAGIC ## Step 0: Installing and loading all the required libraries

# COMMAND ----------

# MAGIC %pip install -U sentence-transformers faiss-cpu

# COMMAND ----------

import os, os.path
import glob
from sentence_transformers import SentenceTransformer, util
import pandas as pd
import pyspark.pandas as ps
import torch
import pickle
from PIL import Image
import faiss
import mlflow.pyfunc
from sys import version_info
import numpy as np
import cloudpickle

# COMMAND ----------

# MAGIC %md
# MAGIC ## Step 1: Load the model, embeddings, recipe and image path information

# COMMAND ----------

#Load the ViT-Clip model
model = SentenceTransformer('clip-ViT-B-32')

# COMMAND ----------

pickle_location = "/dbfs/FileStore/shared_uploads/avinash.sooriyarachchi@databricks.com/pickled_paths_embeddings.pkl"

# COMMAND ----------

unpickled = pickle.load(open(pickle_location, "rb"))

# COMMAND ----------

embeddings = unpickled['embeddings']
paths = unpickled['image_paths']

assert len(paths) == len(embeddings)

# COMMAND ----------

paths[:3]

# COMMAND ----------

#Extracting the image name from the paths
paths[0].split('/')[-1]

# COMMAND ----------

# MAGIC %md
# MAGIC locations of artifacts. Note that path_df should have image names as the images will be in a directory accessible to the backend of the app as opposed to the serving container. Thus the image names have to be prepended with the appropriate path. This will be reflected in the app.py filed for both the fastapi and streamlit backend.

# COMMAND ----------

clip_vit_model_path =  "/dbfs/FileStore/shared_uploads/avinash.sooriyarachchi@databricks.com/recipe_ai/model/"
recipe_path = "/dbfs/FileStore/shared_uploads/avinash.sooriyarachchi@databricks.com/food_images/food_recipes_jpg.csv"
pickle_location = "/dbfs/FileStore/shared_uploads/avinash.sooriyarachchi@databricks.com/recipe_ai/paths_embeddings.pkl"

# COMMAND ----------

model.save(clip_vit_model_path)

# COMMAND ----------

artifacts = {
  "clip_vit_model_path":clip_vit_model_path,
  "recipe_path":recipe_path,
  "pickle_location": pickle_location
}

# COMMAND ----------

# MAGIC %md
# MAGIC ## Step 2: Create the Wrapper class that inherits from pyfunc.PythonModel and deploy it to serving v2

# COMMAND ----------

import mlflow.pyfunc

class recipeKNNModelWrapper(mlflow.pyfunc.PythonModel):
  def load_context(self, context):
    from sentence_transformers import SentenceTransformer, util
    from PIL import Image
    import glob
    import torch
    import pickle
    from PIL import Image
    import base64
    from io import BytesIO
    import json
    import pandas as pd

    self.model = SentenceTransformer(context.artifacts["clip_vit_model_path"])
    #Create a dict with image paths as keys that would allow the similar items to be looked up in O(1)
    self.recipe_dict = pd.read_csv(context.artifacts["recipe_path"])[['Title', 'Cleaned_Ingredients', 'Instructions', 'Image_Name']].set_index('Image_Name').T.to_dict()
    self.paths = [path.split('/')[-1] for path in pickle.load(open(context.artifacts["pickle_location"], "rb"))['image_paths']]
    self.embeddings = pickle.load(open(context.artifacts["pickle_location"], "rb"))['embeddings']
    
  def predict(self, context, model_input):
    from PIL import Image
    from sentence_transformers import SentenceTransformer, util
    import base64
    from io import BytesIO
    import json
    import pandas as pd

    image_string = base64.b64decode(model_input)
    image_string = Image.open(BytesIO(image_string)).convert('RGB')


    query_emb = self.model.encode([image_string], convert_to_tensor=True, show_progress_bar=False)

    # Then, we use the util.semantic_search function, which computes the cosine-similarity
    # between the query embedding and all image embeddings.
    # It then returns the top_k highest ranked images, which we output (ANN using hsnw)
    #Using KNN for the timebeing
    hits = util.semantic_search(query_emb, self.embeddings, top_k=3)[0]

    matches = []
    details = []

    for i in range(3):
      matches.append(self.paths[(hits[i]["corpus_id"])])
      #This finds the corresponding recipes for the images
      details.append(self.recipe_dict[matches[i]])

    results = {'images': matches, 'recipes':details}
    return json.dumps(results)

# COMMAND ----------

model_input = ""

# COMMAND ----------

PYTHON_VERSION = "{major}.{minor}.{micro}".format(major=version_info.major,
                                                  minor=version_info.minor,
                                                  micro=version_info.micro)

# COMMAND ----------

example_np = np.array(model_input)

# COMMAND ----------

import cloudpickle
conda_env = {
    'channels': ['defaults'],
    'dependencies': [
      'python={}'.format(PYTHON_VERSION),
      'pip',
      {
        'pip': [
          'mlflow',
          'sentence_transformers',
          'pandas',
          'Pillow',
          'cloudpickle=={}'.format(cloudpickle.__version__),
          'torch'],
      },
    ],
    'name': 'st_env'
}

mlflow_pyfunc_model_path = "VIT_CLIP_MULTIMODAL_KNN_1"

# COMMAND ----------

# MAGIC %md 
# MAGIC ## Step 4: Log the model
# MAGIC With autologging enabled, assuming you're running this in a ML cluster, the green notification will appear on the top right. Please follow the instructions given here to deploy this model to serving (in a workspace with the public preview of serving V2 enabled):https://docs.databricks.com/applications/mlflow/models.html, https://docs.databricks.com/applications/mlflow/serverless-real-time-inference.html

# COMMAND ----------

mlflow.pyfunc.log_model(artifact_path=mlflow_pyfunc_model_path, python_model=recipeKNNModelWrapper(),artifacts=artifacts,
        conda_env=conda_env, input_example = example_np)

# COMMAND ----------

# MAGIC %md 
# MAGIC ## Step 4: Use FAISS to perform Approximate Nearest Neighbor search over the embedding index instead of KNN

# COMMAND ----------

#Create a FAISS index as shown here: https://github.com/UKPLab/sentence-transformers/blob/master/examples/applications/semantic-search/semantic_search_quora_hnswlib.py

# COMMAND ----------

#Define index location 
faiss_index_path = "/dbfs/FileStore/shared_uploads/avinash.sooriyarachchi@databricks.com/recipe_ai/faiss.index"

# COMMAND ----------

embeddings = unpickled['embeddings']

# COMMAND ----------

embedding_size = len(embeddings[0])
embedding_size

# COMMAND ----------

embeddings = embeddings.numpy()

# COMMAND ----------

top_k_hits = 3

# COMMAND ----------

max_corpus_size = 20000


# COMMAND ----------

#Choose a value of n_clusters between the two following values. 1024 seems like a good option
(4*(20000**0.5)), (16*(20000**0.5))

# COMMAND ----------

n_clusters = 1024

# COMMAND ----------

#We use Inner Product (dot-product) as Index. We will normalize our vectors to unit length, then is Inner Product equal to cosine similarity
quantizer = faiss.IndexFlatIP(embedding_size)
index = faiss.IndexIVFFlat(quantizer, embedding_size, n_clusters, faiss.METRIC_INNER_PRODUCT)

# COMMAND ----------

#Number of clusters to explorer at search time. We will search for nearest neighbors in 3 clusters.
index.nprobe = 30

# COMMAND ----------

corpus_embeddings = embeddings / np.linalg.norm(embeddings, axis=1)[:, None]


# COMMAND ----------

# Then we train the index to find a suitable clustering
index.train(corpus_embeddings)

# COMMAND ----------

# Finally we add all embeddings to the index
index.add(corpus_embeddings)

# COMMAND ----------

query = "Cuttlefish"
query_embedding = model.encode(query)



# COMMAND ----------

#FAISS works with inner product (dot product). When we normalize vectors to unit length, inner product is equal to cosine similarity
query_embedding = query_embedding / np.linalg.norm(query_embedding)
query_embedding = np.expand_dims(query_embedding, axis=0)

# COMMAND ----------

# Search in FAISS. It returns a matrix with distances and corpus ids.
distances, corpus_ids = index.search(query_embedding, top_k_hits)

# COMMAND ----------

# We extract corpus ids and scores for the first query
hits = [{'corpus_id': id, 'score': score} for id, score in zip(corpus_ids[0], distances[0])]
hits = sorted(hits, key=lambda x: x['score'], reverse=True)
hits

# COMMAND ----------

matches = [hit['corpus_id'] for hit in hits]

# COMMAND ----------

paths[matches[0]], paths[matches[1]], paths[matches[2]]

# COMMAND ----------

#Define a function to perform the search. 
#This will be refactored to create the wrapper class
import base64
from io import BytesIO


image_string = base64.b64decode(model_input)
image_string = Image.open(BytesIO(image_string)).convert('RGB')
recipe_dict = pd.read_csv(recipe_path)[['Title', 'Cleaned_Ingredients', 'Instructions', 'Image_Name']].set_index('Image_Name').T.to_dict()
def search(image_string):
  query_embedding = model.encode(image_string, show_progress_bar=False)
  query_embedding = query_embedding / np.linalg.norm(query_embedding)
  query_embedding = np.expand_dims(query_embedding, axis=0)
  distances, corpus_ids = index.search(query_embedding, top_k_hits)
  hits = [{'corpus_id': id, 'score': score} for id, score in zip(corpus_ids[0], distances[0])]
  hits = sorted(hits, key=lambda x: x['score'], reverse=True)

  matches = []
  details = []

  for i in range(3):
    matches.append(paths[(hits[i]["corpus_id"])])
    details.append(recipe_dict[matches[i].split('/')[-1]])

  results = {'images': matches, 'recipes':details}
  return results

  

# COMMAND ----------

# MAGIC %md
# MAGIC Let's test out some images

# COMMAND ----------

im_loc = "/dbfs/FileStore/shared_uploads/avinash.sooriyarachchi@databricks.com/lasagna1.png"
query = Image.open(im_loc).convert('RGB')


# COMMAND ----------

search(image_string)

# COMMAND ----------

query = "My grandma's beef stroganoff"
search(query)

# COMMAND ----------

# MAGIC %md
# MAGIC Save the index to a path

# COMMAND ----------

faiss.write_index(index, faiss_index_path)

# COMMAND ----------

index_loaded = faiss.read_index(faiss_index_path)

# COMMAND ----------

artifacts = {
  "clip_vit_model_path":clip_vit_model_path,
#  "faiss_index_path": faiss_index_path,
  "recipe_path":recipe_path,
  "pickle_location": pickle_location
}

# COMMAND ----------

import cloudpickle
conda_env = {
    'channels': ['defaults'],
    'dependencies': [
      'python={}'.format(PYTHON_VERSION),
      'pip',
      {
        'pip': [
          'mlflow',
          'sentence_transformers',
          'pandas',
          'Pillow',
          'faiss-cpu',
          'cloudpickle=={}'.format(cloudpickle.__version__),
          'torch'],
      },
    ],
    'name': 'st_env'
}

mlflow_pyfunc_model_path = "VIT_CLIP_MULTIMODAL_FAISS_2"

# COMMAND ----------

class recipeFAISSModelWrapper(mlflow.pyfunc.PythonModel):
  def load_context(self, context):
    from sentence_transformers import SentenceTransformer, util
    from PIL import Image
    import glob
    import torch
    import pickle
    from PIL import Image
    import base64
    from io import BytesIO
    import json
    import faiss
    import pandas as pd
    import requests

    self.model = SentenceTransformer(context.artifacts["clip_vit_model_path"])
     #Create a dict with image paths as keys that would allow the (recipes/ ingredients corresponding to) similar items to be looked up in O(1)
    self.recipe_dict = pd.read_csv(context.artifacts["recipe_path"])[['Title', 'Cleaned_Ingredients', 'Instructions', 'Image_Name']].set_index('Image_Name').T.to_dict()
    self.paths = [path.split('/')[-1] for path in pickle.load(open(context.artifacts["pickle_location"], "rb"))['image_paths']]
    
    #Saving and loading the index does not work, so we have to build the index during container creation
    self.embeddings = pickle.load(open(context.artifacts["pickle_location"], "rb"))['embeddings'].numpy()
    #FAISS specifc parameters
    self.top_k_hits = 3
    self.embedding_size = len(self.embeddings[0])
    self.max_corpus_size = 20000
    self.n_clusters = 1024
    
    #Now we build the index
    self.quantizer = faiss.IndexFlatIP(self.embedding_size)
    self.index = faiss.IndexIVFFlat(self.quantizer, self.embedding_size, self.n_clusters, faiss.METRIC_INNER_PRODUCT)
    self.index.nprobe = 30
    self.corpus_embeddings = self.embeddings / np.linalg.norm(self.embeddings, axis=1)[:, None]
    self.index.train(self.corpus_embeddings)
    self.index.add(self.corpus_embeddings)
    
    
  def predict(self, context, model_input):
    from PIL import Image
    from sentence_transformers import SentenceTransformer, util
    import base64
    from io import BytesIO
    import json
    import faiss
    import pandas as pd
      
    #Conditional logic to handle image URLs, strings describing images and b64 encoded image representations to fully make use of the multimodality of OpenAI CLIP-Vit
    if model_input.tolist()[:5]=='https':
      image_string = Image.open(requests.get(model_input, stream=True).raw)
      query_embedding = self.model.encode(image_string, show_progress_bar=False)
    elif len(model_input.tolist())>100:
      image_string = base64.b64decode(model_input)
      image_string = Image.open(BytesIO(image_string)).convert('RGB')
      query_embedding = self.model.encode(image_string, show_progress_bar=False)
    else:
      query_embedding = self.model.encode(model_input.tolist(), show_progress_bar=False)
      

    
    query_embedding = query_embedding / np.linalg.norm(query_embedding)
    query_embedding = np.expand_dims(query_embedding, axis=0)
    distances, corpus_ids = self.index.search(query_embedding, self.top_k_hits)
    hits = [{'corpus_id': id, 'score': score} for id, score in zip(corpus_ids[0], distances[0])]
    hits = sorted(hits, key=lambda x: x['score'], reverse=True)

    matches = []
    details = []

    for i in range(3):
      matches.append(self.paths[(hits[i]["corpus_id"])])
      details.append(self.recipe_dict[matches[i]])

    results = {'images': matches, 'recipes':details}
    return json.dumps(results)

# COMMAND ----------

mlflow.pyfunc.log_model(artifact_path=mlflow_pyfunc_model_path, python_model=recipeFAISSModelWrapper(),artifacts=artifacts,
        conda_env=conda_env, input_example = example_np)
